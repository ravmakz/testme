name: Remove PR Branch

on:
  workflow_run:
    workflows: ["Close Pull Request Signal"]
    types:
      - completed
      # - requested
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Print github context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

  delete:
    name: "Delete branch from Pull Request"
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Print github context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: 'Get Number'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            if (typeof matchArtifact === 'undefined') {
              return false;
            }
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
      - run: unzip pr.zip
      - name: 'Get Number'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var PR_ref= Number(fs.readFileSync('./NR'));
            const expected = /^md[-]outputs[-]PR[-]\d/;
            if (!expected.test(PR_ref)) {
              console.log("BUMMER");
              console.log(PR_ref);
              return false;
            }
            var id = await github.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: PR_ref
            });
            console.log(PR_ref)
